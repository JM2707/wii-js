{"name":"Wii-js","tagline":"A sane, documented, (hopefully) performant event-based library for Wiimote webpage interaction.","body":"wii-js\r\n==============================================================================================\r\nThe Nintendo Wii is an entertainment system with an utterly _massive_ install base, and when \r\nyou couple it with the fact that it's got a web browser (mostly) built in, there's a lot of\r\npotential for third party development. Sadly, few have opted to do any sort of development for\r\nit. While it doesn't help that Nintendo pretty much dropped the ball on this opportunity, the\r\nexperience of browsing the web on the Wii isn't actually that compelling to begin with.\r\n\r\nThat said, I think this can serve one other purpose: it's an ideal environment to teach children\r\nhow to program! I created this library to sanitize Wii interaction with webpages in the browser,\r\nas it's notoriously crippled. It aims to offer a solid, documented, performant API that's easy to \r\nunderstand and pick up. With this library, you can have up to 4 Wii-motes interacting with your\r\nwebpage at once, a dynamic not found in other web browsing mediums.\r\n\r\nYou can find a built source file and a _minified_ source file for production use in the **/js/** directory.\r\nTo play with a live example, load up the demo (_index.html_) on your own server, or feel free to use mine:\r\n\r\n**wii-js Demo: [http://venodesigns.net/wii/](http://venodesigns.net/wii/)**  \r\n\r\nWorking with the Wii's browser can be odd - it has moderately good support for CSS, so you're never really\r\nas bad off as you'd be with a version of Internet Explorer - that said, if you're looking for a good read\r\non what's supported, check out **[this article on Opera Wii supported technologies](http://www.opera.com/docs/specs/opera9/?platform=wii)**.\r\n\r\nQuestions, comments, criticism and praise can be directed to me at the following outlets:\r\n\r\n- You can email me at **ryan [at] venodesigns (dot) net**.  \r\n- You can hit me up on Twitter: **[@ryanmcgrath](http://twitter.com/ryanmcgrath/)**  \r\n- Contact me through **[my website](http://venodesigns.net)**  \r\n- **Technical issues can be filed on the [wii-js GitHub Issues Tracker](https://github.com/ryanmcgrath/wii-js/issues)**  \r\n\r\n\r\nExample Usage\r\n----------------------------------------------------------------------------------------------\r\n``` javascript\r\nvar wiimote = new Wii.Remote(1, {horizontal: true}),\r\n    wiimote2 = new Wii.Remote(2, {horizontal: true});\r\n\r\nwiimote.when('pressed_a', function() {\r\n    alert('Wiimote #1 pressed the A Button!');\r\n});\r\n\r\nwiimote2.when('pressed_a', function() {\r\n\talert('Wiimote #2 pressed the A Button!');\r\n});\r\n\r\nWii.listen();\r\n```\r\n\r\n\r\nTechnical Documentation\r\n----------------------------------------------------------------------------------------------\r\nThe largest issue with making interactive pages that work with the Wii has been that the API has\r\nbeen nothing short of a black hole. When you actually begin to dig in and figure out what's going on,\r\nit gets even uglier to see - the primary wiimote, for instance, has a totally different set of signals\r\nthan the other three.\r\n\r\nwii-js abstracts away most of these differences and/or problems, and works on a very simple event-dispatch \r\nsystem. What this means is that you create an instance of a Wii Remote, subscribe to events, and provide a\r\nfunction to get called when that event has occurred. The following syntax should explain this:\r\n\r\n``` javascript\r\nwiimote.when('event_name_here', function() { /* My callback function */ });\r\n```\r\n\r\nWhen instantiating a Wii Remote instance, you can choose to have the library interpret directional pad controls\r\nin horizontal or vertical mode. You can change this at any point, if you want, by simply swapping the property.\r\n\r\n``` javascript\r\nvar wiimote = new Wii.Remote(1, {horizontal: true}); // Horizontal controls\r\nvar wiimote = new Wii.Remote(1, {horizontal: false}); // Vertical controls\r\n\r\nwiimote.opts.horizontal = true; // Change to horizontal scheme.\r\n```\r\n\r\nThe final important piece is to start the Wii-event loop; this manages the event dispatcher internally. To do this, simply...\r\n\r\n``` javascript\r\nWii.listen();\r\n```\r\n\r\nYou can listen for the following events on all controllers:\r\n\r\n- **pressed_up** - The up button was pressed.  \r\n- **pressed_down** - The down button was pressed.  \r\n- **pressed_left** - The left button was pressed.  \r\n- **pressed_right** - The right button was pressed.  \r\n- **pressed_a** - The A button was pressed.  \r\n- **pressed_1** - The 1 button was pressed. (_Note: On controller 1, this triggers a menu - work in progress..._)  \r\n- **pressed_2** - The 2 button was pressed.  \r\n- **pressed_plus** - The plus (+) button was pressed.  \r\n- **pressed_minus** - The minus (-) button was pressed.  \r\n- **roll_change** - The roll of the controller (balance) changed. You can get the current roll in radians with _\"this.roll\"_; positive is upright, negative is the other.  \r\n- **distance_change** - The distance of the wiimote (in meters) from the TV/sensor bar has changed. This event isn't totally reliable, but should work for most cases.  \r\n\r\nYou can listen for the following events on _extra controllers_, but not the primary controller.\r\n\r\n- **pressed_b** - The B button was pressed.  \r\n- **pressed_c** - The C button (on the Nunchuk) was pressed.  \r\n- **pressed_z** - The Z button (on the Nunchuk) was pressed.  \r\n\r\nYou can also get the following properties from any Wii Remote instance; they will return \"undefined\" if the remote\r\nisn't able to see the TV/sensor bar, so be sure to check this!\r\n\r\n- **x** - The x coordinate where the Wii Remote is pointing to on the screen. Generally between 0 and 800, but can be more on wide pages.\r\n- **y** - The y coordinate where the Wii Remote is pointing to on the screen. Odd one; can be found as low as -48, as high as the height\r\nof the current webpage + toolbar height, if enabled. Tinker with this one for your purposes.\r\n\r\n\r\nExtra Tips and Tricks (Debugging)\r\n------------------------------------------------------------------------------------------------------------------\r\nOne semi-useful trick to point out about this library is that each of your callback functions get passed two\r\narguments by default - a reference to the Wiimote you're working with, and the raw Wiimote status object that the\r\nWii reports back to the library. You get this in a normalized fashion, instead of having to deal with the odd polling\r\nissues present in the browser.\r\n\r\n``` javascript\r\nvar wiimote = new Wii.Remote(1, {horizontal: false});\r\n\r\nwiimote.when('pressed_a', function(wii_remote, wii_remote_status) {\r\n\t/*\tAlert an internal confidence level provided by the Wii. */\r\n\talert(wii_remote_status.dpdValidity);\r\n});\r\n```\r\n\r\nDebugging Javascript on the Wii is also nothing short of incredibly annoying, so I've made some efforts to patch this\r\nup and make life a bit easier. My typical debugging strategy with any Wii-related code would always start with\r\nthe following. The first thing to do is set the Wii listener to run in debug mode, like so:\r\n\r\n``` javascript\r\nWii.listen({debug: true});\r\n```\r\n\r\nWith this set, you can log errors with any of the following functions. `error` can be a string or a complex object.\r\n\r\n- **console.log(error);** - Tried and true, now supported.  \r\n- **console.debug(error);** - Same as console.log here, but syntax is supported.  \r\n- **throw new Error(error);** - Throw them, they'll be logged.  \r\n- **Wii.util.debug(error);** - The core function that handles logging internally.\r\n\r\nIf the typical Wii debugging flow isn't enough for you, go aggressive with this - just be aware that you can crash\r\nthe Wii's browser if you're using try/catch all over the place, as it's not cheap in Javascript.\r\n\r\n``` javascript\r\ntry {\r\n    // Whatever function to execute\r\n} catch(e) { Wii.util.debug(e); }\r\n```\r\n\r\n\r\nWhy the button limitations?\r\n------------------------------------------------------------------------------------------------------------------\r\nThe Nintendo Wii treats the primary controller differently than the other ones, and doesn't report any action\r\nfrom the Nunchuk, nor does it report when someone has pressed the \"B\" button on the primary controller (as it's used\r\nfor scrolling a page).\r\n\r\nThe Wii Browser also doesn't report data for Gamecube controllers, the Classic controller, or any other accessories.\r\n\r\nIt's a work in progress to see what can be done about these, but it's impossible to guarantee anything will come out\r\nof it unless Nintendo and/or Opera can come out with something new.\r\n\r\n\r\nKnown Issues\r\n------------------------------------------------------------------------------------------------------------------\r\n**Primary Wiimote is a bit more responsive than the extra 3**  \r\nThis library works by polling the status of the three extra Wii-remotes in 100ms intervals and dispatching events\r\nbased on this. Anything lower than 100ms causes the Wii to run into memory limitations, and the single-threaded\r\nnature of the browser doesn't really help this issue.\r\n\r\nThe primary Wii-remote uses an odd combination of DOM-esque callbacks; due to this, it reports _more frequently_ than\r\nthe other Wii-remotes. It's not a showstopper by any means, but for small games it would in theory give a weighted advantage.\r\nI'll probably end up throttling this through the library by means of a flag, e.g \"game_mode\": true in the initial options.\r\n\r\n\r\nTodo List\r\n------------------------------------------------------------------------------------------------------------------\r\n- Build in functionality for multiple button presses at the same time (difficult to get right in this environment)\r\n- Determine canceling B-button/scrolling on pages (\"app\"/\"game\" style)\r\n- Determine feasibility of canceling out \"1\" press on the primary Wii-remote.\r\n\r\n\r\nBuilding and Developing\r\n------------------------------------------------------------------------------------------------------------------\r\nIf you'd like to help with this library, you're more than welcome to. Simply fork it on GitHub, work away, then\r\nissue me a pull request. I generally respond within 24 hours.\r\n\r\nThe build system here is pretty simple - edits and changes go into the /js/src/ files, and you can run\r\n\r\n    python build.py  \r\n\r\nfrom the main directory to build a new version. The minifier here is YUI; Closure/UglifyJS are more aggressive, and\r\nfor some reason throw ridiculous issues in the Wii's browser that I've been unable to track down (and I don't have\r\nmore time to throw at it).\r\n\r\nIn short, the builds require Python/Java, but once you've got them all installed you should only need the command above.\r\n\r\n\r\nHow is this different from...?\r\n-------------------------------------------------------------------------------------------------------------------\r\nI sadly did not find out about [wii.js](http://www.bolinfest.com/wii/overview.php) until after I released this library;\r\nwith respect to the original author, his work only covers the primary Wii Remote and not the extra ones, nor has it\r\nbeen updated in years.\tWhile his approach appears to be the same as mine (or mine the same as his), neither one \r\ninfluenced the other, and they're totally separate works.\r\n\r\nWith the exception of wii.js, I do not know of any other (remaining) Wii interaction Javascript libraries. It's for\r\nthese reasons (and my desire for a simpler API) that I built this. ;)\r\n\r\n\r\nLicensing, etc\r\n-------------------------------------------------------------------------------------------------------------------\r\nwii-js is released under an MIT license. Just provide credit where need be if you choose to use this, it's taken quite\r\na bit of my time to decipher the utterly random pieces and intricacies of this Javascript engine. ;)\r\n","google":"UA-40660943-3","note":"Don't delete this file! It's used internally to help with page regeneration."}